# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞
import asyncio
import datetime
import logging
import os
import sqlite3

from contextlib import contextmanager
from logging.handlers import TimedRotatingFileHandler

# –°—Ç–æ—Ä–æ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import colorama
import nest_asyncio
from colorama import Fore, Style
from dotenv import load_dotenv

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
colorama.init()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ colorama –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å

# –í–ª–∞—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π (–º—ñ–∂ INFO —Ç–∞ WARNING)
SUCCESS_LEVEL = 25
logging.addLevelName(SUCCESS_LEVEL, "SUCCESS")


# –ö–∞—Å—Ç–æ–º–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
# –ú–∞—é —Å–∫–∞–∑–∞—Ç–∏, —â–æ —Ü–µ–π –∫–ª–∞—Å –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–∏–π, —Ü—ñ–∫–∞–≤–æ –±—É–ª–æ –ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ
class ColoredConsoleHandler(logging.StreamHandler):
    def emit(self, record):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        if record.levelno >= logging.ERROR:
            color = Fore.RED
        elif record.levelno == SUCCESS_LEVEL:
            color = Fore.GREEN
        elif record.levelno >= logging.WARNING:
            color = Fore.YELLOW
        else:
            color = Fore.WHITE

        # –î–æ–¥–∞—î–º–æ –∫–æ–ª—ñ—Ä –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        record.msg = f"{color}{record.msg}{Style.RESET_ALL}"
        super().emit(record)


# –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥—É –∑ —Ä—ñ–≤–Ω–µ–º SUCCESS
def success(self, message, *args, **kwargs):
    if self.isEnabledFor(SUCCESS_LEVEL):
        self._log(SUCCESS_LEVEL, message, args, **kwargs)


# –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ success –¥–æ Logger
logging.Logger.success = success


def setup_logging():
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤
    logs_dir = "logs"
    os.makedirs(logs_dir, exist_ok=True)

    # –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞ –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    log_file = os.path.join(logs_dir, f"{today}.log")

    # –§–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤: –∫–æ–ª–∏ –≤–æ–Ω–∏ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è —ñ —â–æ —Å–∞–º–µ —Å—Ç–∞–ª–æ—Å—è
    log_format = "%(asctime)s - [%(levelname)s] - %(message)s"
    date_format = "%d-%m-%Y, %H:%M:%S"

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏, —è–∫—â–æ —î
    if logger.handlers:
        logger.handlers.clear()

    # –î–æ–¥–∞—î–º–æ —Ä–æ—Ç–∞—Ü—ñ—é —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤
    # –ë—É–¥–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª —â–æ–¥–Ω—è —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ó—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    file_handler = TimedRotatingFileHandler(
        log_file,
        when="midnight",
        interval=1,
        backupCount=30
    )
    file_handler.setFormatter(logging.Formatter(log_format, date_format))
    logger.addHandler(file_handler)

    # –î–æ–¥–∞—î–º–æ –Ω–∞—à –∫—Ä–∞—Å–∏–≤–∏–π –∫–æ–ª—å–æ—Ä–æ–≤–∏–π –≤–∏–≤—ñ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = ColoredConsoleHandler()
    console_handler.setFormatter(logging.Formatter(log_format, date_format))
    logger.addHandler(console_handler)

    return logger


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä
logger = setup_logging()

from contextlib import contextmanager

def connect_db():
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫ —Å–ª–æ–≤–Ω–∏–∫–∏
        conn = sqlite3.connect("data/codify.db")
        conn.row_factory = sqlite3.Row
        return conn
    except sqlite3.Error as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
        raise

@contextmanager
def db_connection():
    conn = connect_db()
    try:
        yield conn
    finally:
        conn.close()

def initialize_db():
    try:
        # –Ø–∫—â–æ –ë–î –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
        if not os.path.exists("DB_PATH"):
            os.makedirs("data", exist_ok=True)
            conn = connect_db()
            cursor = conn.cursor()

            # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑ —Ñ–∞–π–ª—É
            with open("sql/schema.sql", "r", encoding="utf-8") as f:
                cursor.executescript(f.read())
            conn.commit()
            conn.close()
            logger.success("–ë–∞–∑—É –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        else:
            logger.success("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∂–µ —ñ—Å–Ω—É—î")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")


def seed_db():
    try:
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ë–î –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∫—É—Ä—Å—ñ–≤
        conn = connect_db()
        cursor = conn.cursor()
        with open("sql/seed_courses.sql", "r", encoding="utf-8") as f:
            cursor.executescript(f.read())
        conn.commit()
        conn.close()
        logger.success("–î–∞–Ω—ñ –∫—É—Ä—Å—ñ–≤ –¥–æ–¥–∞–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î: {e}")


def register_user(telegram_id, username):
    try:
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –∞–±–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –≤–∂–µ —î
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR IGNORE INTO users (telegram_id, username)
            VALUES (?, ?)
        """, (telegram_id, username))
        conn.commit()
        conn.close()
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {username} ({telegram_id})")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")


def get_course_names():
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses WHERE active = 1")
        courses = cursor.fetchall()
        conn.close()
        return [course["name"] for course in courses]
    except sqlite3.Error as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤: {e}")
        return []


# –î–æ–¥–∞–Ω–æ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∫—É—Ä—Å—ñ–≤
from data.course_data import COURSE_CONTENT

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —É –∫—É—Ä—Å—ñ
def get_navigation_keyboard():
    # –ù—ñ, —Ç—Ä–µ–±–∞ –¥–æ–∫–∏–Ω—É—Ç–∏ —â–µ –∫–Ω–æ–ø–∫—É "–¥–æ –∑–º—ñ—Å—Ç—É"... —Ç—Ä–µ–±–∞ —Ü–µ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
         InlineKeyboardButton("‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next")],
        [InlineKeyboardButton("üîô –í–∏–π—Ç–∏ –¥–æ –º–µ–Ω—é –ö—É—Ä—Å–∏", callback_data="exit_course")]
    ])


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏
    keyboard = [
        ["üìö –ö—É—Ä—Å–∏", "üë§ –ü—Ä–æ—Ñ—ñ–ª—å"],
        ["‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=reply_markup)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")


async def courses_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ú–µ–Ω—é —Ä–æ–∑–¥—ñ–ª—É –∫—É—Ä—Å—ñ–≤
    keyboard = [
        ["üì• –í–∏–±—ñ—Ä –∫—É—Ä—Å—ñ–≤", "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏/–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è"],
        ["üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞–Ω–∞ —á–µ—Ä–µ–∑ callback_query
    if update.callback_query:
        await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –∫—É—Ä—Å—É:", reply_markup=reply_markup)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –∫—É—Ä—Å—ñ–≤ —á–µ—Ä–µ–∑ callback")
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –∫—É—Ä—Å—É:", reply_markup=reply_markup)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–π—à–æ–≤ —É –º–µ–Ω—é –∫—É—Ä—Å—ñ–≤")


async def start_course_learning(update: Update, context: ContextTypes.DEFAULT_TYPE, course_name: str):
    # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ, –¥–µ –∑–∞—Ä–∞–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –∫—É—Ä—Å—ñ
    context.user_data["course_position"] = 0
    context.user_data["course_name"] = course_name

    if course_name in COURSE_CONTENT:
        try:
            conn = connect_db()
            cursor = conn.cursor()
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ –∫—É—Ä—Å—É
            cursor.execute("SELECT image_url FROM courses WHERE name = ?", (course_name,))
            row = cursor.fetchone()
            conn.close()

            image_url = row["image_url"] if row else None

            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª –∫—É—Ä—Å—É
            text = COURSE_CONTENT[course_name][0]

            if image_url:
                # –§–æ—Ç–æ –∫—É—Ä—Å—É –æ–∫—Ä–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
                await update.message.reply_photo(photo=image_url)

            # –¢–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            await update.message.reply_text(
                text,
                parse_mode="Markdown",
                reply_markup=get_navigation_keyboard()
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –ø–æ—á–∞–≤ –≤–∏–≤—á–µ–Ω–Ω—è –∫—É—Ä—Å—É: {course_name}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∫—É—Ä—Å—É: {e}")
            await update.message.reply_text("üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫—É—Ä—Å—É.")
    else:
        logger.warning(f"–ö—É—Ä—Å {course_name} —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
        await update.message.reply_text("‚õî –ù–∞–≤—á–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫—É—Ä—Å—É —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤ –∫—É—Ä—Å—ñ
async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–æ –∫—É—Ä—Å
    if "course_name" not in context.user_data:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –∫—É—Ä—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó: –∫—É—Ä—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
        return

    course_name = context.user_data["course_name"]
    position = context.user_data.get("course_position", 0)
    old_position = position

    # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    if query.data == "next":
        # –ü–µ—Ä–µ—Ö—ñ–¥ –≤–ø–µ—Ä–µ–¥, –∞–ª–µ –Ω–µ –¥–∞–ª—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É
        position = min(position + 1, len(COURSE_CONTENT[course_name]) - 1)
    elif query.data == "prev":
        # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞–∑–∞–¥, –∞–ª–µ –Ω–µ —Ä–∞–Ω—ñ—à–µ –ø–µ—Ä—à–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É
        position = max(position - 1, 0)
    elif query.data == "exit_course":
        # –í–∏—Ö—ñ–¥ –∑ –∫—É—Ä—Å—É
        await query.message.delete()
        await courses_menu(update, context)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤–∏–π—à–æ–≤ –∑ –∫—É—Ä—Å—É: {course_name}")
        return

    # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –∑–º—ñ–Ω–∏–ª–∞—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ –≤–º—ñ—Å—Ç
    if position != old_position:
        context.user_data["course_position"] = position
        text = COURSE_CONTENT[course_name][position]

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –≤–º—ñ—Å—Ç–æ–º —ñ —Ç–∏–º–∏ –∂ –∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=get_navigation_keyboard()
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ —Ä–æ–∑–¥—ñ–ª—É {position} —É –∫—É—Ä—Å—ñ {course_name}")


async def manage_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —ñ–∑ –ë–î
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses WHERE active = 1")
        courses = cursor.fetchall()

        if courses:
            # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å—ñ–≤ —ñ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
            keyboard = [[course["name"]] for course in courses] + [["üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –ö—É—Ä—Å–∏"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É:", reply_markup=reply_markup)
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –≤–∏–±—ñ—Ä –∫—É—Ä—Å—ñ–≤")
        else:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.")
            logger.warning("–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É")

        conn.close()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—ñ –∫—É—Ä—Å–∞–º–∏: {e}")


async def continue_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—É—Ä—Å–∏, –Ω–∞ —è–∫—ñ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user_id = update.effective_user.id
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT c.name
            FROM user_courses uc
            JOIN courses c ON uc.course_id = c.id
            JOIN users u ON uc.user_id = u.id
            WHERE u.telegram_id = ?
        """, (user_id,))
        subscriptions = cursor.fetchall()
        conn.close()

        # –Ø–∫—â–æ —â–µ –Ω–µ–º–∞ –ø—ñ–¥–ø–∏—Å–æ–∫, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –∫—É—Ä—Å
        if not subscriptions:
            await update.message.reply_text("–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫. üì• –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å.")
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫—É—Ä—Å–∏")
            return

        # –Ø–∫—â–æ —î –ª–∏—à–µ –æ–¥–∏–Ω –∫—É—Ä—Å, –≤—ñ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω—å–æ–≥–æ
        if len(subscriptions) == 1:
            course_name = subscriptions[0][0]
            await update.message.reply_text(f"üîÅ –í–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç–µ –∫—É—Ä—Å: {course_name}")
            await start_course_learning(update, context, course_name)
            return

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫—ñ–ª—å–∫–∞ –∫—É—Ä—Å—ñ–≤, –¥–∞—î–º–æ –≤–∏–±—ñ—Ä
        keyboard = [[course[0]] for course in subscriptions] + [["üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –ö—É—Ä—Å–∏"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:", reply_markup=reply_markup)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±–∏—Ä–∞—î –∑ –∫—ñ–ª—å–∫–æ—Ö –∫—É—Ä—Å—ñ–≤")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
        user_id = update.effective_user.id
        username = update.effective_user.username
        register_user(user_id, username)  # –†–µ—î—Å—Ç—Ä—É—î–º–æ –≤ –±–∞–∑—ñ

        await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Codify!")
        await main_menu(update, context)
        logger.success(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞: {username} ({user_id})")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start: {e}")


async def about_us(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–¥—ñ–ª "–ü—Ä–æ –Ω–∞—Å" –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞ –≤–µ–±-—Å–∞–π—Ç
    text = "Codify ‚Äî –æ—Å–≤—ñ—Ç–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è üéì"
    button = [[InlineKeyboardButton("üåê –í–µ–±—Å–∞–π—Ç", url="https://github.com/codifychat/chatbot")]]
    reply_markup = InlineKeyboardMarkup(button)
    await update.message.reply_text(text, reply_markup=reply_markup)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –≤—ñ–¥–∫—Ä–∏–≤ —Ä–æ–∑–¥—ñ–ª '–ü—Ä–æ –Ω–∞—Å'")


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –ë–î
        user_id = update.effective_user.id
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é –∑ –¥–∞–Ω–∏–º–∏
            profile_text = (
                f"ID: {user_id}\n"
            )
            await update.message.reply_text(profile_text)
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –ø—Ä–æ—Ñ—ñ–ª—å")
        else:
            await update.message.reply_text("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            logger.warning(f"–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        conn.close()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")


async def subscribe_to_course(telegram_id, course_name):
    try:
        # –ü—ñ–¥–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫—É—Ä—Å
        conn = connect_db()
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        user = cursor.fetchone()
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É
        cursor.execute("SELECT id FROM courses WHERE name = ?", (course_name,))
        course = cursor.fetchone()

        # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∫—É—Ä—Å, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–≤'—è–∑–æ–∫
        if user and course:
            cursor.execute("""
                INSERT OR IGNORE INTO user_courses (user_id, course_id)
                VALUES (?, ?)
            """, (user["id"], course["id"]))
            conn.commit()
            logger.success(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ –∫—É—Ä—Å: {course_name}")
        conn.close()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è next_lesson, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞
async def next_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —Ä–µ–∂–∏–º–æ–º —á–∏—Ç–∞–Ω–Ω—è –∫—É—Ä—Å—É.")
    logger.info(f"User {update.effective_user.id} attempted to use next_lesson function")


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        user_id = update.effective_user.id
        logger.info(f"Button pressed by user {user_id}: {text}")

        if text == "üìö –ö—É—Ä—Å–∏":
            await courses_menu(update, context)
        elif text == "üë§ –ü—Ä–æ—Ñ—ñ–ª—å":
            await show_profile(update, context)
        elif text == "üì• –í–∏–±—ñ—Ä –∫—É—Ä—Å—ñ–≤":
            await manage_courses(update, context)
        elif text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏/–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è":
            await continue_learning(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –ö—É—Ä—Å–∏":
            await courses_menu(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
            await main_menu(update, context)
        elif text == "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å":
            await about_us(update, context)
        elif text in get_course_names():
            await subscribe_to_course(user_id, text)
            context.user_data["selected_course"] = text
            await update.message.reply_text(f"‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å: {text}")
            # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫—É—Ä—Å—É –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
            keyboard = [
                ["‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –∫—É—Ä—Å –∑–∞—Ä–∞–∑"],
                ["üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –ö—É—Ä—Å–∏"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ë–∞–∂–∞—î—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞—Ä–∞–∑?", reply_markup=reply_markup)
        elif text == "‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ –∫—É—Ä—Å –∑–∞—Ä–∞–∑":
            if "selected_course" in context.user_data:
                course_name = context.user_data["selected_course"]
                await start_course_learning(update, context, course_name)
            else:
                await update.message.reply_text("‚ùì –ö—É—Ä—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å.")
                logger.warning(f"User {user_id} tried to start course without selecting one")
        elif text == "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫":
            await next_lesson(update, context)
        else:
            await update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é.")
            logger.warning(f"Unknown command from user {user_id}: {text}")
    except Exception as e:
        logger.error(f"Handle Buttons Error: {e}")


async def main():
    try:
        initialize_db()
        seed_db()

        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!")
            return

        app = ApplicationBuilder().token(bot_token).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        app.add_handler(CallbackQueryHandler(handle_navigation))

        logger.success("Application started successfully")
        await app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"Main Bot Error: {e}")


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
